[package]
name = "atomic-int"
version = "0.1.5-dev"
edition = "2018"
# If `libc` isn't enabled, the minimum supported Rust version is actually 1.64,
# but there currently isn't a way to encode this in Cargo.toml. Also, libc
# changed its MSRV to 1.63 in version 0.2.164, but this crate can be used with
# older libc versions if manually specified with `cargo update`.
rust-version = "1.60"
description = "Atomics for additional integers, like C/FFI types"
documentation = "https://docs.rs/atomic-int"
readme = "misc/crate-readme.md"
repository = "https://github.com/taylordotfish/atomic-int"
license = "Apache-2.0"
keywords = ["atomic", "integer", "libc", "c_int", "fallback"]
categories = ["no-std"]

[dependencies.libc]
version = "0.2"
optional = true

[features]
default = ["primitives", "c"]
signal = ["libc"]
primitives = []
c = [
    "c_char",
    "c_schar",
    "c_uchar",
    "c_short",
    "c_ushort",
    "c_int",
    "c_uint",
    "c_long",
    "c_ulong",
    "c_longlong",
    "c_ulonglong",
]
c_char = []
c_schar = []
c_uchar = []
c_short = []
c_ushort = []
c_int = []
c_uint = []
c_long = []
c_ulong = []
c_longlong = []
c_ulonglong = []
doc_cfg = []

[lints.rust.unexpected_cfgs]
level = "warn"
check-cfg = [
    "cfg(has_c_char_atomic)",
    "cfg(has_c_schar_atomic)",
    "cfg(has_c_uchar_atomic)",
    "cfg(has_c_short_atomic)",
    "cfg(has_c_ushort_atomic)",
    "cfg(has_c_int_atomic)",
    "cfg(has_c_uint_atomic)",
    "cfg(has_c_long_atomic)",
    "cfg(has_c_ulong_atomic)",
    "cfg(has_c_longlong_atomic)",
    "cfg(has_c_ulonglong_atomic)",
]

[package.metadata.docs.rs]
features = ["doc_cfg"]
